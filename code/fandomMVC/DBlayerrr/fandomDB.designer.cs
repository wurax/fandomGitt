#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBlayerrr
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dmaa0918_1074212")]
	public partial class fandomDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCity(City instance);
    partial void UpdateCity(City instance);
    partial void DeleteCity(City instance);
    partial void InsertValue(Value instance);
    partial void UpdateValue(Value instance);
    partial void DeleteValue(Value instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertOrderLine(OrderLine instance);
    partial void UpdateOrderLine(OrderLine instance);
    partial void DeleteOrderLine(OrderLine instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    partial void InsertProdPropertyValue(ProdPropertyValue instance);
    partial void UpdateProdPropertyValue(ProdPropertyValue instance);
    partial void DeleteProdPropertyValue(ProdPropertyValue instance);
    partial void InsertProductFandom(ProductFandom instance);
    partial void UpdateProductFandom(ProductFandom instance);
    partial void DeleteProductFandom(ProductFandom instance);
    partial void InsertProperty(Property instance);
    partial void UpdateProperty(Property instance);
    partial void DeleteProperty(Property instance);
    partial void InsertStock(Stock instance);
    partial void UpdateStock(Stock instance);
    partial void DeleteStock(Stock instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertPayment(Payment instance);
    partial void UpdatePayment(Payment instance);
    partial void DeletePayment(Payment instance);
    #endregion
		
		public fandomDBDataContext() : 
				base(global::DBlayerrr.Properties.Settings.Default.dmaa0918_1074212ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public fandomDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public fandomDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public fandomDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public fandomDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<City> Cities
		{
			get
			{
				return this.GetTable<City>();
			}
		}
		
		public System.Data.Linq.Table<Value> Values
		{
			get
			{
				return this.GetTable<Value>();
			}
		}
		
		public System.Data.Linq.Table<Location> Locations
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<OrderLine> OrderLines
		{
			get
			{
				return this.GetTable<OrderLine>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<ProdPropertyValue> ProdPropertyValues
		{
			get
			{
				return this.GetTable<ProdPropertyValue>();
			}
		}
		
		public System.Data.Linq.Table<ProductFandom> ProductFandoms
		{
			get
			{
				return this.GetTable<ProductFandom>();
			}
		}
		
		public System.Data.Linq.Table<Property> Properties
		{
			get
			{
				return this.GetTable<Property>();
			}
		}
		
		public System.Data.Linq.Table<Stock> Stocks
		{
			get
			{
				return this.GetTable<Stock>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Suppliers
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<Payment> Payments
		{
			get
			{
				return this.GetTable<Payment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.City")]
	public partial class City : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _zipCode;
		
		private string _city1;
		
		private EntitySet<Supplier> _Suppliers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnzipCodeChanging(int value);
    partial void OnzipCodeChanged();
    partial void Oncity1Changing(string value);
    partial void Oncity1Changed();
    #endregion
		
		public City()
		{
			this._Suppliers = new EntitySet<Supplier>(new Action<Supplier>(this.attach_Suppliers), new Action<Supplier>(this.detach_Suppliers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zipCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int zipCode
		{
			get
			{
				return this._zipCode;
			}
			set
			{
				if ((this._zipCode != value))
				{
					this.OnzipCodeChanging(value);
					this.SendPropertyChanging();
					this._zipCode = value;
					this.SendPropertyChanged("zipCode");
					this.OnzipCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="city", Storage="_city1", DbType="VarChar(50)")]
		public string city1
		{
			get
			{
				return this._city1;
			}
			set
			{
				if ((this._city1 != value))
				{
					this.Oncity1Changing(value);
					this.SendPropertyChanging();
					this._city1 = value;
					this.SendPropertyChanged("city1");
					this.Oncity1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Supplier", Storage="_Suppliers", ThisKey="zipCode", OtherKey="zipcode")]
		public EntitySet<Supplier> Suppliers
		{
			get
			{
				return this._Suppliers;
			}
			set
			{
				this._Suppliers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.City = this;
		}
		
		private void detach_Suppliers(Supplier entity)
		{
			this.SendPropertyChanging();
			entity.City = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Value")]
	public partial class Value : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _valueID;
		
		private string _attributes;
		
		private System.Nullable<int> _propertyID;
		
		private EntitySet<ProdPropertyValue> _ProdPropertyValues;
		
		private EntityRef<Property> _Property;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvalueIDChanging(int value);
    partial void OnvalueIDChanged();
    partial void OnattributesChanging(string value);
    partial void OnattributesChanged();
    partial void OnpropertyIDChanging(System.Nullable<int> value);
    partial void OnpropertyIDChanged();
    #endregion
		
		public Value()
		{
			this._ProdPropertyValues = new EntitySet<ProdPropertyValue>(new Action<ProdPropertyValue>(this.attach_ProdPropertyValues), new Action<ProdPropertyValue>(this.detach_ProdPropertyValues));
			this._Property = default(EntityRef<Property>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_valueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int valueID
		{
			get
			{
				return this._valueID;
			}
			set
			{
				if ((this._valueID != value))
				{
					this.OnvalueIDChanging(value);
					this.SendPropertyChanging();
					this._valueID = value;
					this.SendPropertyChanged("valueID");
					this.OnvalueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attributes", DbType="VarChar(50)")]
		public string attributes
		{
			get
			{
				return this._attributes;
			}
			set
			{
				if ((this._attributes != value))
				{
					this.OnattributesChanging(value);
					this.SendPropertyChanging();
					this._attributes = value;
					this.SendPropertyChanged("attributes");
					this.OnattributesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_propertyID", DbType="Int")]
		public System.Nullable<int> propertyID
		{
			get
			{
				return this._propertyID;
			}
			set
			{
				if ((this._propertyID != value))
				{
					if (this._Property.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpropertyIDChanging(value);
					this.SendPropertyChanging();
					this._propertyID = value;
					this.SendPropertyChanged("propertyID");
					this.OnpropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Value_ProdPropertyValue", Storage="_ProdPropertyValues", ThisKey="valueID", OtherKey="valueID")]
		public EntitySet<ProdPropertyValue> ProdPropertyValues
		{
			get
			{
				return this._ProdPropertyValues;
			}
			set
			{
				this._ProdPropertyValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Value", Storage="_Property", ThisKey="propertyID", OtherKey="propertyID", IsForeignKey=true)]
		public Property Property
		{
			get
			{
				return this._Property.Entity;
			}
			set
			{
				Property previousValue = this._Property.Entity;
				if (((previousValue != value) 
							|| (this._Property.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Property.Entity = null;
						previousValue.Values.Remove(this);
					}
					this._Property.Entity = value;
					if ((value != null))
					{
						value.Values.Add(this);
						this._propertyID = value.propertyID;
					}
					else
					{
						this._propertyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Property");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProdPropertyValues(ProdPropertyValue entity)
		{
			this.SendPropertyChanging();
			entity.Value = this;
		}
		
		private void detach_ProdPropertyValues(ProdPropertyValue entity)
		{
			this.SendPropertyChanging();
			entity.Value = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _productID;
		
		private string _locationNo;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnproductIDChanging(int value);
    partial void OnproductIDChanged();
    partial void OnlocationNoChanging(string value);
    partial void OnlocationNoChanged();
    #endregion
		
		public Location()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int productID
		{
			get
			{
				return this._productID;
			}
			set
			{
				if ((this._productID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductIDChanging(value);
					this.SendPropertyChanging();
					this._productID = value;
					this.SendPropertyChanged("productID");
					this.OnproductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_locationNo", DbType="VarChar(6) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string locationNo
		{
			get
			{
				return this._locationNo;
			}
			set
			{
				if ((this._locationNo != value))
				{
					this.OnlocationNoChanging(value);
					this.SendPropertyChanging();
					this._locationNo = value;
					this.SendPropertyChanged("locationNo");
					this.OnlocationNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Location", Storage="_Product", ThisKey="productID", OtherKey="productID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Locations.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Locations.Add(this);
						this._productID = value.productID;
					}
					else
					{
						this._productID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderLine")]
	public partial class OrderLine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _orderLineID;
		
		private int _amount;
		
		private double _price;
		
		private string _lineText;
		
		private System.Nullable<int> _productID;
		
		private System.Nullable<int> _orderID;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderLineIDChanging(int value);
    partial void OnorderLineIDChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnlineTextChanging(string value);
    partial void OnlineTextChanged();
    partial void OnproductIDChanging(System.Nullable<int> value);
    partial void OnproductIDChanged();
    partial void OnorderIDChanging(System.Nullable<int> value);
    partial void OnorderIDChanged();
    #endregion
		
		public OrderLine()
		{
			this._Order = default(EntityRef<Order>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderLineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int orderLineID
		{
			get
			{
				return this._orderLineID;
			}
			set
			{
				if ((this._orderLineID != value))
				{
					this.OnorderLineIDChanging(value);
					this.SendPropertyChanging();
					this._orderLineID = value;
					this.SendPropertyChanged("orderLineID");
					this.OnorderLineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lineText", DbType="VarChar(100)")]
		public string lineText
		{
			get
			{
				return this._lineText;
			}
			set
			{
				if ((this._lineText != value))
				{
					this.OnlineTextChanging(value);
					this.SendPropertyChanging();
					this._lineText = value;
					this.SendPropertyChanged("lineText");
					this.OnlineTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productID", DbType="Int")]
		public System.Nullable<int> productID
		{
			get
			{
				return this._productID;
			}
			set
			{
				if ((this._productID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductIDChanging(value);
					this.SendPropertyChanging();
					this._productID = value;
					this.SendPropertyChanged("productID");
					this.OnproductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="Int")]
		public System.Nullable<int> orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderLine", Storage="_Order", ThisKey="orderID", OtherKey="orderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderLines.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderLines.Add(this);
						this._orderID = value.orderID;
					}
					else
					{
						this._orderID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderLine", Storage="_Product", ThisKey="productID", OtherKey="productID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.OrderLines.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.OrderLines.Add(this);
						this._productID = value.productID;
					}
					else
					{
						this._productID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _orderID;
		
		private System.Nullable<System.DateTime> _invoiceDate;
		
		private System.Nullable<System.DateTime> _invoiceDueDate;
		
		private System.Nullable<int> _paymentID;
		
		private System.Nullable<int> _orderStatusID;
		
		private EntitySet<OrderLine> _OrderLines;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
		private EntityRef<Payment> _Payment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(int value);
    partial void OnorderIDChanged();
    partial void OninvoiceDateChanging(System.Nullable<System.DateTime> value);
    partial void OninvoiceDateChanged();
    partial void OninvoiceDueDateChanging(System.Nullable<System.DateTime> value);
    partial void OninvoiceDueDateChanged();
    partial void OnpaymentIDChanging(System.Nullable<int> value);
    partial void OnpaymentIDChanged();
    partial void OnorderStatusIDChanging(System.Nullable<int> value);
    partial void OnorderStatusIDChanged();
    #endregion
		
		public Order()
		{
			this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
			this._OrderStatus = default(EntityRef<OrderStatus>);
			this._Payment = default(EntityRef<Payment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_invoiceDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> invoiceDate
		{
			get
			{
				return this._invoiceDate;
			}
			set
			{
				if ((this._invoiceDate != value))
				{
					this.OninvoiceDateChanging(value);
					this.SendPropertyChanging();
					this._invoiceDate = value;
					this.SendPropertyChanged("invoiceDate");
					this.OninvoiceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_invoiceDueDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> invoiceDueDate
		{
			get
			{
				return this._invoiceDueDate;
			}
			set
			{
				if ((this._invoiceDueDate != value))
				{
					this.OninvoiceDueDateChanging(value);
					this.SendPropertyChanging();
					this._invoiceDueDate = value;
					this.SendPropertyChanged("invoiceDueDate");
					this.OninvoiceDueDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paymentID", DbType="Int")]
		public System.Nullable<int> paymentID
		{
			get
			{
				return this._paymentID;
			}
			set
			{
				if ((this._paymentID != value))
				{
					if (this._Payment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnpaymentIDChanging(value);
					this.SendPropertyChanging();
					this._paymentID = value;
					this.SendPropertyChanged("paymentID");
					this.OnpaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderStatusID", DbType="Int")]
		public System.Nullable<int> orderStatusID
		{
			get
			{
				return this._orderStatusID;
			}
			set
			{
				if ((this._orderStatusID != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._orderStatusID = value;
					this.SendPropertyChanged("orderStatusID");
					this.OnorderStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderLine", Storage="_OrderLines", ThisKey="orderID", OtherKey="orderID")]
		public EntitySet<OrderLine> OrderLines
		{
			get
			{
				return this._OrderLines;
			}
			set
			{
				this._OrderLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_Order", Storage="_OrderStatus", ThisKey="orderStatusID", OtherKey="orderStatusID", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._orderStatusID = value.orderStatusID;
					}
					else
					{
						this._orderStatusID = default(Nullable<int>);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_Order", Storage="_Payment", ThisKey="paymentID", OtherKey="paymentID", IsForeignKey=true)]
		public Payment Payment
		{
			get
			{
				return this._Payment.Entity;
			}
			set
			{
				Payment previousValue = this._Payment.Entity;
				if (((previousValue != value) 
							|| (this._Payment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Payment.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._paymentID = value.paymentID;
					}
					else
					{
						this._paymentID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Payment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _orderStatusID;
		
		private string _status;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderStatusIDChanging(int value);
    partial void OnorderStatusIDChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public OrderStatus()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderStatusID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int orderStatusID
		{
			get
			{
				return this._orderStatusID;
			}
			set
			{
				if ((this._orderStatusID != value))
				{
					this.OnorderStatusIDChanging(value);
					this.SendPropertyChanging();
					this._orderStatusID = value;
					this.SendPropertyChanged("orderStatusID");
					this.OnorderStatusIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderStatus_Order", Storage="_Orders", ThisKey="orderStatusID", OtherKey="orderStatusID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProdPropertyValue")]
	public partial class ProdPropertyValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _valueID;
		
		private int _productID;
		
		private EntityRef<Value> _Value;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnvalueIDChanging(int value);
    partial void OnvalueIDChanged();
    partial void OnproductIDChanging(int value);
    partial void OnproductIDChanged();
    #endregion
		
		public ProdPropertyValue()
		{
			this._Value = default(EntityRef<Value>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_valueID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int valueID
		{
			get
			{
				return this._valueID;
			}
			set
			{
				if ((this._valueID != value))
				{
					if (this._Value.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnvalueIDChanging(value);
					this.SendPropertyChanging();
					this._valueID = value;
					this.SendPropertyChanged("valueID");
					this.OnvalueIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int productID
		{
			get
			{
				return this._productID;
			}
			set
			{
				if ((this._productID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductIDChanging(value);
					this.SendPropertyChanging();
					this._productID = value;
					this.SendPropertyChanged("productID");
					this.OnproductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Value_ProdPropertyValue", Storage="_Value", ThisKey="valueID", OtherKey="valueID", IsForeignKey=true)]
		public Value Value
		{
			get
			{
				return this._Value.Entity;
			}
			set
			{
				Value previousValue = this._Value.Entity;
				if (((previousValue != value) 
							|| (this._Value.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Value.Entity = null;
						previousValue.ProdPropertyValues.Remove(this);
					}
					this._Value.Entity = value;
					if ((value != null))
					{
						value.ProdPropertyValues.Add(this);
						this._valueID = value.valueID;
					}
					else
					{
						this._valueID = default(int);
					}
					this.SendPropertyChanged("Value");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProdPropertyValue", Storage="_Product", ThisKey="productID", OtherKey="productID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProdPropertyValues.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProdPropertyValues.Add(this);
						this._productID = value.productID;
					}
					else
					{
						this._productID = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductFandom")]
	public partial class ProductFandom : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PFandomID;
		
		private string _fandomName;
		
		private System.Nullable<int> _productID;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPFandomIDChanging(int value);
    partial void OnPFandomIDChanged();
    partial void OnfandomNameChanging(string value);
    partial void OnfandomNameChanged();
    partial void OnproductIDChanging(System.Nullable<int> value);
    partial void OnproductIDChanged();
    #endregion
		
		public ProductFandom()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PFandomID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PFandomID
		{
			get
			{
				return this._PFandomID;
			}
			set
			{
				if ((this._PFandomID != value))
				{
					this.OnPFandomIDChanging(value);
					this.SendPropertyChanging();
					this._PFandomID = value;
					this.SendPropertyChanged("PFandomID");
					this.OnPFandomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fandomName", DbType="VarChar(50)")]
		public string fandomName
		{
			get
			{
				return this._fandomName;
			}
			set
			{
				if ((this._fandomName != value))
				{
					this.OnfandomNameChanging(value);
					this.SendPropertyChanging();
					this._fandomName = value;
					this.SendPropertyChanged("fandomName");
					this.OnfandomNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productID", DbType="Int")]
		public System.Nullable<int> productID
		{
			get
			{
				return this._productID;
			}
			set
			{
				if ((this._productID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductIDChanging(value);
					this.SendPropertyChanging();
					this._productID = value;
					this.SendPropertyChanged("productID");
					this.OnproductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductFandom", Storage="_Product", ThisKey="productID", OtherKey="productID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ProductFandoms.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ProductFandoms.Add(this);
						this._productID = value.productID;
					}
					else
					{
						this._productID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Property")]
	public partial class Property : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _propertyID;
		
		private string _propertyName;
		
		private EntitySet<Value> _Values;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpropertyIDChanging(int value);
    partial void OnpropertyIDChanged();
    partial void OnpropertyNameChanging(string value);
    partial void OnpropertyNameChanged();
    #endregion
		
		public Property()
		{
			this._Values = new EntitySet<Value>(new Action<Value>(this.attach_Values), new Action<Value>(this.detach_Values));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_propertyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int propertyID
		{
			get
			{
				return this._propertyID;
			}
			set
			{
				if ((this._propertyID != value))
				{
					this.OnpropertyIDChanging(value);
					this.SendPropertyChanging();
					this._propertyID = value;
					this.SendPropertyChanged("propertyID");
					this.OnpropertyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_propertyName", DbType="VarChar(50)")]
		public string propertyName
		{
			get
			{
				return this._propertyName;
			}
			set
			{
				if ((this._propertyName != value))
				{
					this.OnpropertyNameChanging(value);
					this.SendPropertyChanging();
					this._propertyName = value;
					this.SendPropertyChanged("propertyName");
					this.OnpropertyNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Property_Value", Storage="_Values", ThisKey="propertyID", OtherKey="propertyID")]
		public EntitySet<Value> Values
		{
			get
			{
				return this._Values;
			}
			set
			{
				this._Values.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Values(Value entity)
		{
			this.SendPropertyChanging();
			entity.Property = this;
		}
		
		private void detach_Values(Value entity)
		{
			this.SendPropertyChanging();
			entity.Property = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stock")]
	public partial class Stock : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _stockID;
		
		private System.Nullable<System.DateTime> _arrivalDate;
		
		private System.Nullable<int> _inOrder;
		
		private System.Nullable<int> _supplierID;
		
		private System.Nullable<int> _productID;
		
		private EntityRef<Supplier> _Supplier;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstockIDChanging(int value);
    partial void OnstockIDChanged();
    partial void OnarrivalDateChanging(System.Nullable<System.DateTime> value);
    partial void OnarrivalDateChanged();
    partial void OninOrderChanging(System.Nullable<int> value);
    partial void OninOrderChanged();
    partial void OnsupplierIDChanging(System.Nullable<int> value);
    partial void OnsupplierIDChanged();
    partial void OnproductIDChanging(System.Nullable<int> value);
    partial void OnproductIDChanged();
    #endregion
		
		public Stock()
		{
			this._Supplier = default(EntityRef<Supplier>);
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_stockID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int stockID
		{
			get
			{
				return this._stockID;
			}
			set
			{
				if ((this._stockID != value))
				{
					this.OnstockIDChanging(value);
					this.SendPropertyChanging();
					this._stockID = value;
					this.SendPropertyChanged("stockID");
					this.OnstockIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_arrivalDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> arrivalDate
		{
			get
			{
				return this._arrivalDate;
			}
			set
			{
				if ((this._arrivalDate != value))
				{
					this.OnarrivalDateChanging(value);
					this.SendPropertyChanging();
					this._arrivalDate = value;
					this.SendPropertyChanged("arrivalDate");
					this.OnarrivalDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_inOrder", DbType="Int")]
		public System.Nullable<int> inOrder
		{
			get
			{
				return this._inOrder;
			}
			set
			{
				if ((this._inOrder != value))
				{
					this.OninOrderChanging(value);
					this.SendPropertyChanging();
					this._inOrder = value;
					this.SendPropertyChanged("inOrder");
					this.OninOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supplierID", DbType="Int")]
		public System.Nullable<int> supplierID
		{
			get
			{
				return this._supplierID;
			}
			set
			{
				if ((this._supplierID != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsupplierIDChanging(value);
					this.SendPropertyChanging();
					this._supplierID = value;
					this.SendPropertyChanged("supplierID");
					this.OnsupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productID", DbType="Int")]
		public System.Nullable<int> productID
		{
			get
			{
				return this._productID;
			}
			set
			{
				if ((this._productID != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnproductIDChanging(value);
					this.SendPropertyChanging();
					this._productID = value;
					this.SendPropertyChanged("productID");
					this.OnproductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Stock", Storage="_Supplier", ThisKey="supplierID", OtherKey="supplierID", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._supplierID = value.supplierID;
					}
					else
					{
						this._supplierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Stock", Storage="_Product", ThisKey="productID", OtherKey="productID", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Stocks.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Stocks.Add(this);
						this._productID = value.productID;
					}
					else
					{
						this._productID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _supplierID;
		
		private string _supplierName;
		
		private string _supplierAddress;
		
		private System.Nullable<bool> _phone;
		
		private string _email;
		
		private System.Nullable<int> _zipcode;
		
		private EntitySet<Stock> _Stocks;
		
		private EntitySet<Product> _Products;
		
		private EntityRef<City> _City;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsupplierIDChanging(int value);
    partial void OnsupplierIDChanged();
    partial void OnsupplierNameChanging(string value);
    partial void OnsupplierNameChanged();
    partial void OnsupplierAddressChanging(string value);
    partial void OnsupplierAddressChanged();
    partial void OnphoneChanging(System.Nullable<bool> value);
    partial void OnphoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnzipcodeChanging(System.Nullable<int> value);
    partial void OnzipcodeChanged();
    #endregion
		
		public Supplier()
		{
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			this._City = default(EntityRef<City>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supplierID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int supplierID
		{
			get
			{
				return this._supplierID;
			}
			set
			{
				if ((this._supplierID != value))
				{
					this.OnsupplierIDChanging(value);
					this.SendPropertyChanging();
					this._supplierID = value;
					this.SendPropertyChanged("supplierID");
					this.OnsupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supplierName", DbType="VarChar(75)")]
		public string supplierName
		{
			get
			{
				return this._supplierName;
			}
			set
			{
				if ((this._supplierName != value))
				{
					this.OnsupplierNameChanging(value);
					this.SendPropertyChanging();
					this._supplierName = value;
					this.SendPropertyChanged("supplierName");
					this.OnsupplierNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supplierAddress", DbType="VarChar(50)")]
		public string supplierAddress
		{
			get
			{
				return this._supplierAddress;
			}
			set
			{
				if ((this._supplierAddress != value))
				{
					this.OnsupplierAddressChanging(value);
					this.SendPropertyChanging();
					this._supplierAddress = value;
					this.SendPropertyChanged("supplierAddress");
					this.OnsupplierAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="Bit")]
		public System.Nullable<bool> phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(50)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_zipcode", DbType="Int")]
		public System.Nullable<int> zipcode
		{
			get
			{
				return this._zipcode;
			}
			set
			{
				if ((this._zipcode != value))
				{
					if (this._City.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnzipcodeChanging(value);
					this.SendPropertyChanging();
					this._zipcode = value;
					this.SendPropertyChanged("zipcode");
					this.OnzipcodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Stock", Storage="_Stocks", ThisKey="supplierID", OtherKey="supplierID")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Product", Storage="_Products", ThisKey="supplierID", OtherKey="supplierID")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="City_Supplier", Storage="_City", ThisKey="zipcode", OtherKey="zipCode", IsForeignKey=true)]
		public City City
		{
			get
			{
				return this._City.Entity;
			}
			set
			{
				City previousValue = this._City.Entity;
				if (((previousValue != value) 
							|| (this._City.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._City.Entity = null;
						previousValue.Suppliers.Remove(this);
					}
					this._City.Entity = value;
					if ((value != null))
					{
						value.Suppliers.Add(this);
						this._zipcode = value.zipCode;
					}
					else
					{
						this._zipcode = default(Nullable<int>);
					}
					this.SendPropertyChanged("City");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Product")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _productID;
		
		private double _price;
		
		private string _productName;
		
		private string _productDescription;
		
		private System.Nullable<int> _supplierID;
		
		private System.Nullable<int> _quantity;
		
		private System.Nullable<bool> _visible;
		
		private EntitySet<Location> _Locations;
		
		private EntitySet<OrderLine> _OrderLines;
		
		private EntitySet<ProdPropertyValue> _ProdPropertyValues;
		
		private EntitySet<ProductFandom> _ProductFandoms;
		
		private EntitySet<Stock> _Stocks;
		
		private EntityRef<Supplier> _Supplier;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnproductIDChanging(int value);
    partial void OnproductIDChanged();
    partial void OnpriceChanging(double value);
    partial void OnpriceChanged();
    partial void OnproductNameChanging(string value);
    partial void OnproductNameChanged();
    partial void OnproductDescriptionChanging(string value);
    partial void OnproductDescriptionChanged();
    partial void OnsupplierIDChanging(System.Nullable<int> value);
    partial void OnsupplierIDChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    partial void OnvisibleChanging(System.Nullable<bool> value);
    partial void OnvisibleChanged();
    #endregion
		
		public Product()
		{
			this._Locations = new EntitySet<Location>(new Action<Location>(this.attach_Locations), new Action<Location>(this.detach_Locations));
			this._OrderLines = new EntitySet<OrderLine>(new Action<OrderLine>(this.attach_OrderLines), new Action<OrderLine>(this.detach_OrderLines));
			this._ProdPropertyValues = new EntitySet<ProdPropertyValue>(new Action<ProdPropertyValue>(this.attach_ProdPropertyValues), new Action<ProdPropertyValue>(this.detach_ProdPropertyValues));
			this._ProductFandoms = new EntitySet<ProductFandom>(new Action<ProductFandom>(this.attach_ProductFandoms), new Action<ProductFandom>(this.detach_ProductFandoms));
			this._Stocks = new EntitySet<Stock>(new Action<Stock>(this.attach_Stocks), new Action<Stock>(this.detach_Stocks));
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int productID
		{
			get
			{
				return this._productID;
			}
			set
			{
				if ((this._productID != value))
				{
					this.OnproductIDChanging(value);
					this.SendPropertyChanging();
					this._productID = value;
					this.SendPropertyChanged("productID");
					this.OnproductIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Float NOT NULL")]
		public double price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productName", DbType="VarChar(75)")]
		public string productName
		{
			get
			{
				return this._productName;
			}
			set
			{
				if ((this._productName != value))
				{
					this.OnproductNameChanging(value);
					this.SendPropertyChanging();
					this._productName = value;
					this.SendPropertyChanged("productName");
					this.OnproductNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_productDescription", DbType="VarChar(500)")]
		public string productDescription
		{
			get
			{
				return this._productDescription;
			}
			set
			{
				if ((this._productDescription != value))
				{
					this.OnproductDescriptionChanging(value);
					this.SendPropertyChanging();
					this._productDescription = value;
					this.SendPropertyChanged("productDescription");
					this.OnproductDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supplierID", DbType="Int")]
		public System.Nullable<int> supplierID
		{
			get
			{
				return this._supplierID;
			}
			set
			{
				if ((this._supplierID != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsupplierIDChanging(value);
					this.SendPropertyChanging();
					this._supplierID = value;
					this.SendPropertyChanged("supplierID");
					this.OnsupplierIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_visible", DbType="Bit")]
		public System.Nullable<bool> visible
		{
			get
			{
				return this._visible;
			}
			set
			{
				if ((this._visible != value))
				{
					this.OnvisibleChanging(value);
					this.SendPropertyChanging();
					this._visible = value;
					this.SendPropertyChanged("visible");
					this.OnvisibleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Location", Storage="_Locations", ThisKey="productID", OtherKey="productID")]
		public EntitySet<Location> Locations
		{
			get
			{
				return this._Locations;
			}
			set
			{
				this._Locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_OrderLine", Storage="_OrderLines", ThisKey="productID", OtherKey="productID")]
		public EntitySet<OrderLine> OrderLines
		{
			get
			{
				return this._OrderLines;
			}
			set
			{
				this._OrderLines.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProdPropertyValue", Storage="_ProdPropertyValues", ThisKey="productID", OtherKey="productID")]
		public EntitySet<ProdPropertyValue> ProdPropertyValues
		{
			get
			{
				return this._ProdPropertyValues;
			}
			set
			{
				this._ProdPropertyValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_ProductFandom", Storage="_ProductFandoms", ThisKey="productID", OtherKey="productID")]
		public EntitySet<ProductFandom> ProductFandoms
		{
			get
			{
				return this._ProductFandoms;
			}
			set
			{
				this._ProductFandoms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Product_Stock", Storage="_Stocks", ThisKey="productID", OtherKey="productID")]
		public EntitySet<Stock> Stocks
		{
			get
			{
				return this._Stocks;
			}
			set
			{
				this._Stocks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_Product", Storage="_Supplier", ThisKey="supplierID", OtherKey="supplierID", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._supplierID = value.supplierID;
					}
					else
					{
						this._supplierID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Locations(Location entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_OrderLines(OrderLine entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProdPropertyValues(ProdPropertyValue entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProdPropertyValues(ProdPropertyValue entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_ProductFandoms(ProductFandom entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ProductFandoms(ProductFandom entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Stocks(Stock entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment")]
	public partial class Payment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _paymentID;
		
		private System.Nullable<System.DateTime> _paymentDate;
		
		private int _totalAmount;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpaymentIDChanging(int value);
    partial void OnpaymentIDChanged();
    partial void OnpaymentDateChanging(System.Nullable<System.DateTime> value);
    partial void OnpaymentDateChanged();
    partial void OntotalAmountChanging(int value);
    partial void OntotalAmountChanged();
    #endregion
		
		public Payment()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paymentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int paymentID
		{
			get
			{
				return this._paymentID;
			}
			set
			{
				if ((this._paymentID != value))
				{
					this.OnpaymentIDChanging(value);
					this.SendPropertyChanging();
					this._paymentID = value;
					this.SendPropertyChanged("paymentID");
					this.OnpaymentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paymentDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> paymentDate
		{
			get
			{
				return this._paymentDate;
			}
			set
			{
				if ((this._paymentDate != value))
				{
					this.OnpaymentDateChanging(value);
					this.SendPropertyChanging();
					this._paymentDate = value;
					this.SendPropertyChanged("paymentDate");
					this.OnpaymentDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalAmount", DbType="Int NOT NULL")]
		public int totalAmount
		{
			get
			{
				return this._totalAmount;
			}
			set
			{
				if ((this._totalAmount != value))
				{
					this.OntotalAmountChanging(value);
					this.SendPropertyChanging();
					this._totalAmount = value;
					this.SendPropertyChanged("totalAmount");
					this.OntotalAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_Order", Storage="_Orders", ThisKey="paymentID", OtherKey="paymentID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Payment = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Payment = null;
		}
	}
}
#pragma warning restore 1591
